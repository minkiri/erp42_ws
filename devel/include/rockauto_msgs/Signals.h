// Generated by gencpp from file rockauto_msgs/Signals.msg
// DO NOT EDIT!


#ifndef ROCKAUTO_MSGS_MESSAGE_SIGNALS_H
#define ROCKAUTO_MSGS_MESSAGE_SIGNALS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <rockauto_msgs/ExtractedPosition.h>

namespace rockauto_msgs
{
template <class ContainerAllocator>
struct Signals_
{
  typedef Signals_<ContainerAllocator> Type;

  Signals_()
    : header()
    , Signals()  {
    }
  Signals_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Signals(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::rockauto_msgs::ExtractedPosition_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::rockauto_msgs::ExtractedPosition_<ContainerAllocator> >> _Signals_type;
  _Signals_type Signals;





  typedef boost::shared_ptr< ::rockauto_msgs::Signals_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rockauto_msgs::Signals_<ContainerAllocator> const> ConstPtr;

}; // struct Signals_

typedef ::rockauto_msgs::Signals_<std::allocator<void> > Signals;

typedef boost::shared_ptr< ::rockauto_msgs::Signals > SignalsPtr;
typedef boost::shared_ptr< ::rockauto_msgs::Signals const> SignalsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rockauto_msgs::Signals_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rockauto_msgs::Signals_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rockauto_msgs::Signals_<ContainerAllocator1> & lhs, const ::rockauto_msgs::Signals_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Signals == rhs.Signals;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rockauto_msgs::Signals_<ContainerAllocator1> & lhs, const ::rockauto_msgs::Signals_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rockauto_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rockauto_msgs::Signals_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rockauto_msgs::Signals_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rockauto_msgs::Signals_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rockauto_msgs::Signals_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rockauto_msgs::Signals_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rockauto_msgs::Signals_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rockauto_msgs::Signals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a8533304c9ae882ac02a5af0bd7a8dcd";
  }

  static const char* value(const ::rockauto_msgs::Signals_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa8533304c9ae882aULL;
  static const uint64_t static_value2 = 0xc02a5af0bd7a8dcdULL;
};

template<class ContainerAllocator>
struct DataType< ::rockauto_msgs::Signals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rockauto_msgs/Signals";
  }

  static const char* value(const ::rockauto_msgs::Signals_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rockauto_msgs::Signals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"ExtractedPosition[] Signals\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: rockauto_msgs/ExtractedPosition\n"
"# This message defines the information required to describe a lamp (bulb)\n"
"# in a traffic signal, according to the information extracted from the ADAS Map\n"
"# and the extrinsic camera calibration\n"
"\n"
"int32 signalId  # Traffic Signal Lamp ID\n"
"int32 u         # Lamp ROI x in image coords\n"
"int32 v         # Lamp ROI y in image coords\n"
"int32 radius    # Lamp Radius\n"
"float64 x       # X position in map coordinates\n"
"float64 y       # Y position in map coordinates\n"
"float64 z       # Z position in map coordinates\n"
"float64 hang    # Azimuth \"Horizontal Angle\"\n"
"int8 type       # Lamp Type (red, yellow, green, ...)\n"
"int32 linkId    # Closest LinkID (lane) in VectorMap\n"
"int32 plId      # PoleID to which this Lamp belongs to\n"
;
  }

  static const char* value(const ::rockauto_msgs::Signals_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rockauto_msgs::Signals_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Signals);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Signals_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rockauto_msgs::Signals_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rockauto_msgs::Signals_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Signals[]" << std::endl;
    for (size_t i = 0; i < v.Signals.size(); ++i)
    {
      s << indent << "  Signals[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rockauto_msgs::ExtractedPosition_<ContainerAllocator> >::stream(s, indent + "    ", v.Signals[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROCKAUTO_MSGS_MESSAGE_SIGNALS_H
