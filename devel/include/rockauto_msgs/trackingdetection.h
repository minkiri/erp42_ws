// Generated by gencpp from file rockauto_msgs/trackingdetection.msg
// DO NOT EDIT!


#ifndef ROCKAUTO_MSGS_MESSAGE_TRACKINGDETECTION_H
#define ROCKAUTO_MSGS_MESSAGE_TRACKINGDETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PolygonStamped.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>

namespace rockauto_msgs
{
template <class ContainerAllocator>
struct trackingdetection_
{
  typedef trackingdetection_<ContainerAllocator> Type;

  trackingdetection_()
    : x_center(0.0)
    , y_center(0.0)
    , z_center(0.0)
    , global_x_center(0.0)
    , global_y_center(0.0)
    , world_theta(0.0)
    , local_theta(0.0)
    , world_velocity(0.0)
    , local_velocity(0.0)
    , acceleration(0.0)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , classification(0)
    , local_diff_theta(0.0)
    , convex_hull()
    , pointcloud()
    , worldpointcloud()
    , track_id(0)
    , predict_x_position(0.0)
    , predict_y_position(0.0)
    , predict_world_x_position(0.0)
    , predict_world_y_position(0.0)  {
    }
  trackingdetection_(const ContainerAllocator& _alloc)
    : x_center(0.0)
    , y_center(0.0)
    , z_center(0.0)
    , global_x_center(0.0)
    , global_y_center(0.0)
    , world_theta(0.0)
    , local_theta(0.0)
    , world_velocity(0.0)
    , local_velocity(0.0)
    , acceleration(0.0)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , classification(0)
    , local_diff_theta(0.0)
    , convex_hull(_alloc)
    , pointcloud(_alloc)
    , worldpointcloud(_alloc)
    , track_id(0)
    , predict_x_position(0.0)
    , predict_y_position(0.0)
    , predict_world_x_position(0.0)
    , predict_world_y_position(0.0)  {
  (void)_alloc;
    }



   typedef float _x_center_type;
  _x_center_type x_center;

   typedef float _y_center_type;
  _y_center_type y_center;

   typedef float _z_center_type;
  _z_center_type z_center;

   typedef float _global_x_center_type;
  _global_x_center_type global_x_center;

   typedef float _global_y_center_type;
  _global_y_center_type global_y_center;

   typedef float _world_theta_type;
  _world_theta_type world_theta;

   typedef float _local_theta_type;
  _local_theta_type local_theta;

   typedef float _world_velocity_type;
  _world_velocity_type world_velocity;

   typedef float _local_velocity_type;
  _local_velocity_type local_velocity;

   typedef float _acceleration_type;
  _acceleration_type acceleration;

   typedef float _length_type;
  _length_type length;

   typedef float _width_type;
  _width_type width;

   typedef float _height_type;
  _height_type height;

   typedef int32_t _classification_type;
  _classification_type classification;

   typedef float _local_diff_theta_type;
  _local_diff_theta_type local_diff_theta;

   typedef  ::geometry_msgs::PolygonStamped_<ContainerAllocator>  _convex_hull_type;
  _convex_hull_type convex_hull;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _pointcloud_type;
  _pointcloud_type pointcloud;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _worldpointcloud_type;
  _worldpointcloud_type worldpointcloud;

   typedef int32_t _track_id_type;
  _track_id_type track_id;

   typedef float _predict_x_position_type;
  _predict_x_position_type predict_x_position;

   typedef float _predict_y_position_type;
  _predict_y_position_type predict_y_position;

   typedef float _predict_world_x_position_type;
  _predict_world_x_position_type predict_world_x_position;

   typedef float _predict_world_y_position_type;
  _predict_world_y_position_type predict_world_y_position;





  typedef boost::shared_ptr< ::rockauto_msgs::trackingdetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rockauto_msgs::trackingdetection_<ContainerAllocator> const> ConstPtr;

}; // struct trackingdetection_

typedef ::rockauto_msgs::trackingdetection_<std::allocator<void> > trackingdetection;

typedef boost::shared_ptr< ::rockauto_msgs::trackingdetection > trackingdetectionPtr;
typedef boost::shared_ptr< ::rockauto_msgs::trackingdetection const> trackingdetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rockauto_msgs::trackingdetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rockauto_msgs::trackingdetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rockauto_msgs::trackingdetection_<ContainerAllocator1> & lhs, const ::rockauto_msgs::trackingdetection_<ContainerAllocator2> & rhs)
{
  return lhs.x_center == rhs.x_center &&
    lhs.y_center == rhs.y_center &&
    lhs.z_center == rhs.z_center &&
    lhs.global_x_center == rhs.global_x_center &&
    lhs.global_y_center == rhs.global_y_center &&
    lhs.world_theta == rhs.world_theta &&
    lhs.local_theta == rhs.local_theta &&
    lhs.world_velocity == rhs.world_velocity &&
    lhs.local_velocity == rhs.local_velocity &&
    lhs.acceleration == rhs.acceleration &&
    lhs.length == rhs.length &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.classification == rhs.classification &&
    lhs.local_diff_theta == rhs.local_diff_theta &&
    lhs.convex_hull == rhs.convex_hull &&
    lhs.pointcloud == rhs.pointcloud &&
    lhs.worldpointcloud == rhs.worldpointcloud &&
    lhs.track_id == rhs.track_id &&
    lhs.predict_x_position == rhs.predict_x_position &&
    lhs.predict_y_position == rhs.predict_y_position &&
    lhs.predict_world_x_position == rhs.predict_world_x_position &&
    lhs.predict_world_y_position == rhs.predict_world_y_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rockauto_msgs::trackingdetection_<ContainerAllocator1> & lhs, const ::rockauto_msgs::trackingdetection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rockauto_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rockauto_msgs::trackingdetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rockauto_msgs::trackingdetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rockauto_msgs::trackingdetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rockauto_msgs::trackingdetection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rockauto_msgs::trackingdetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rockauto_msgs::trackingdetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rockauto_msgs::trackingdetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a0aaf4ea613be8382a1e653da94b9c23";
  }

  static const char* value(const ::rockauto_msgs::trackingdetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa0aaf4ea613be838ULL;
  static const uint64_t static_value2 = 0x2a1e653da94b9c23ULL;
};

template<class ContainerAllocator>
struct DataType< ::rockauto_msgs::trackingdetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rockauto_msgs/trackingdetection";
  }

  static const char* value(const ::rockauto_msgs::trackingdetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rockauto_msgs::trackingdetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x_center			#local\n"
"float32 y_center			#local\n"
"float32 z_center			#local\n"
"float32 global_x_center			#global\n"
"float32 global_y_center			#global\n"
"float32 world_theta			#deg 	ccw\n"
"float32 local_theta			#deg	ccw\n"
"float32 world_velocity			#m/s\n"
"float32 local_velocity			#m/s\n"
"float32 acceleration			#m/s2\n"
"float32 length				#m 0\n"
"float32 width				#m 0\n"
"float32 height				#m 0\n"
"int32 classification			#0 : car -3 : ped\n"
"float32 local_diff_theta		#deg/s\n"
"geometry_msgs/PolygonStamped    convex_hull\n"
"sensor_msgs/PointCloud2         pointcloud\n"
"sensor_msgs/PointCloud2         worldpointcloud\n"
"int32 track_id				#id\n"
"float32 predict_x_position		#m	local\n"
"float32 predict_y_position		#m	local\n"
"float32 predict_world_x_position	#m	global\n"
"float32 predict_world_y_position	#m	global\n"
"#geometry_msgs/PolygonStamped    circum_box\n"
"#geometry_msgs/PolygonStamped    world_circum_box\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PolygonStamped\n"
"# This represents a Polygon with reference coordinate frame and timestamp\n"
"Header header\n"
"Polygon polygon\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: sensor_msgs/PointCloud2\n"
"# This message holds a collection of N-dimensional points, which may\n"
"# contain additional information such as normals, intensity, etc. The\n"
"# point data is stored as a binary blob, its layout described by the\n"
"# contents of the \"fields\" array.\n"
"\n"
"# The point cloud data may be organized 2d (image-like) or 1d\n"
"# (unordered). Point clouds organized as 2d images may be produced by\n"
"# camera depth sensors such as stereo or time-of-flight.\n"
"\n"
"# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n"
"# points).\n"
"Header header\n"
"\n"
"# 2D structure of the point cloud. If the cloud is unordered, height is\n"
"# 1 and width is the length of the point cloud.\n"
"uint32 height\n"
"uint32 width\n"
"\n"
"# Describes the channels and their layout in the binary data blob.\n"
"PointField[] fields\n"
"\n"
"bool    is_bigendian # Is this data bigendian?\n"
"uint32  point_step   # Length of a point in bytes\n"
"uint32  row_step     # Length of a row in bytes\n"
"uint8[] data         # Actual point data, size is (row_step*height)\n"
"\n"
"bool is_dense        # True if there are no invalid points\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointField\n"
"# This message holds the description of one point entry in the\n"
"# PointCloud2 message format.\n"
"uint8 INT8    = 1\n"
"uint8 UINT8   = 2\n"
"uint8 INT16   = 3\n"
"uint8 UINT16  = 4\n"
"uint8 INT32   = 5\n"
"uint8 UINT32  = 6\n"
"uint8 FLOAT32 = 7\n"
"uint8 FLOAT64 = 8\n"
"\n"
"string name      # Name of field\n"
"uint32 offset    # Offset from start of point struct\n"
"uint8  datatype  # Datatype enumeration, see above\n"
"uint32 count     # How many elements in the field\n"
;
  }

  static const char* value(const ::rockauto_msgs::trackingdetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rockauto_msgs::trackingdetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_center);
      stream.next(m.y_center);
      stream.next(m.z_center);
      stream.next(m.global_x_center);
      stream.next(m.global_y_center);
      stream.next(m.world_theta);
      stream.next(m.local_theta);
      stream.next(m.world_velocity);
      stream.next(m.local_velocity);
      stream.next(m.acceleration);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.classification);
      stream.next(m.local_diff_theta);
      stream.next(m.convex_hull);
      stream.next(m.pointcloud);
      stream.next(m.worldpointcloud);
      stream.next(m.track_id);
      stream.next(m.predict_x_position);
      stream.next(m.predict_y_position);
      stream.next(m.predict_world_x_position);
      stream.next(m.predict_world_y_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct trackingdetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rockauto_msgs::trackingdetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rockauto_msgs::trackingdetection_<ContainerAllocator>& v)
  {
    s << indent << "x_center: ";
    Printer<float>::stream(s, indent + "  ", v.x_center);
    s << indent << "y_center: ";
    Printer<float>::stream(s, indent + "  ", v.y_center);
    s << indent << "z_center: ";
    Printer<float>::stream(s, indent + "  ", v.z_center);
    s << indent << "global_x_center: ";
    Printer<float>::stream(s, indent + "  ", v.global_x_center);
    s << indent << "global_y_center: ";
    Printer<float>::stream(s, indent + "  ", v.global_y_center);
    s << indent << "world_theta: ";
    Printer<float>::stream(s, indent + "  ", v.world_theta);
    s << indent << "local_theta: ";
    Printer<float>::stream(s, indent + "  ", v.local_theta);
    s << indent << "world_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.world_velocity);
    s << indent << "local_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.local_velocity);
    s << indent << "acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "classification: ";
    Printer<int32_t>::stream(s, indent + "  ", v.classification);
    s << indent << "local_diff_theta: ";
    Printer<float>::stream(s, indent + "  ", v.local_diff_theta);
    s << indent << "convex_hull: ";
    s << std::endl;
    Printer< ::geometry_msgs::PolygonStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.convex_hull);
    s << indent << "pointcloud: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.pointcloud);
    s << indent << "worldpointcloud: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.worldpointcloud);
    s << indent << "track_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.track_id);
    s << indent << "predict_x_position: ";
    Printer<float>::stream(s, indent + "  ", v.predict_x_position);
    s << indent << "predict_y_position: ";
    Printer<float>::stream(s, indent + "  ", v.predict_y_position);
    s << indent << "predict_world_x_position: ";
    Printer<float>::stream(s, indent + "  ", v.predict_world_x_position);
    s << indent << "predict_world_y_position: ";
    Printer<float>::stream(s, indent + "  ", v.predict_world_y_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROCKAUTO_MSGS_MESSAGE_TRACKINGDETECTION_H
